<?php
/**
 * Created by PhpStorm.
 * User: cadistortion
 * Date: 4/13/18
 * Time: 11:39 AM
 */

namespace App\Modules;

use App\Modules\Mvc\MvcModule;
use App\Http\Request;
use App\Http\Response;
use Closure;
use PHPUnit\Framework\TestCase;

class ModuleArgumentTest extends TestCase
{
    protected $request;
    protected $response;

    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->request = $this->createMock(Request::class);
        $this->request->expects($this->any())->method('getMethod')->willReturn('GET');
        $this->request->expects($this->any())
            ->method('getUri')
            ->willReturn('localhost:8080/Home/withViewModel/1');
        $this->request->expects($this->any())
            ->method('getDomain')
            ->willReturn('localhost:8080');

        $this->response = $this->createMock(Response::class);
    }

    public function testThatItImplementsNeededInterface()
    {


        $module_result = null;

        $module_argument = new ModuleArgument([
            'request' => $this->request,
            'response' => $this->response
        ]);
        $this->assertNotNull($module_argument);
        $this->assertInstanceOf(ModuleArgumentInterface::class, $module_argument);

        return $module_argument;
    }

    /**
     * @depends testThatItImplementsNeededInterface
     */
    public function testInterfaceMethodsAreImplemented(ModuleArgument $argument)
    {
        $this->assertNotNull($argument->getResponse());
        $this->assertNotNull($argument->getRequest());
    }

    public function testThatModuleArgumentWillBeConstructedWithModuleResult()
    {
        $module_result = $this->createMock(ModuleResultInterface::class);
        $module_argument = new ModuleArgument([
            'request' => $this->request,
            'response' => $this->response,
            'result' => $module_result
        ]);

        $this->assertNotNull($module_argument->getLastResult());
        $this->assertInstanceOf(ModuleResultInterface::class, $module_argument->getLastResult());
    }

    public function testModuleArgumentWillReturnArrayOfPreviousResults()
    {
        $subject_module = $this->createMock(MvcModule::class);
        $subject_module->method('getNameOfModule')->willReturn(MvcModule::class);
        $module_result = $this->createMock(ModuleResultInterface::class);
        $module_result->method('getSubjectModule')->willReturn($subject_module);

        $module_argument = new ModuleArgument([
            'request' => $this->request,
            'response' => $this->response,
            'result' => $module_result
        ]);

        $module_argument->addResult($module_result);

        $this->assertEquals(2, count($module_argument->getAllResults()));
        $this->assertEquals(MvcModule::class, $module_argument->getAllResults()[0]->getSubjectModule()->getNameOfModule());
    }


    public function testGetLastResultMethodReturnsLastModuleResult()
    {
        $subject_module = $this->createMock(MvcModule::class);
        $subject_module->method('getNameOfModule')->willReturn(MvcModule::class);
        $module_result = $this->getMockBuilder(ModuleResultInterface::class)
            ->setMethods([
                'getResultClosure',
                'setResultClosure',
                'getSubjectModule',
                'getTheResult',
                'getModifiedResponseClosure',
                'setModifiedResponseClosure',
                'getModifiedRequestClosure',
                'setModifiedRequestClosure'
            ])
            ->getMock();
        $module_result->expects($this->any())
            ->method('getResultClosure')
            ->willReturn(Closure::fromCallable(function(){
                echo 'Hello world!';
            }));
        $module_result->expects($this->any())
            ->method('setResultClosure')
            ->willReturn(null);
        $module_result->method('getSubjectModule')
        ->willReturn($subject_module);
        $module_result->method('getTheResult')
            ->willReturn('some_result');

        $module_argument = new ModuleArgument([
            'request' => $this->request,
            'response' => $this->response,
            'result' => $module_result
        ]);

        $module_argument->addResult($module_result);

        $another_module_result = $this
            ->getMockBuilder(ModuleResultInterface::class)
            ->setMethods([
                'getResultClosure',
                'setResultClosure',
                'getSubjectModule',
                'getTheResult',
                'getModifiedResponseClosure',
                'setModifiedResponseClosure',
                'getModifiedRequestClosure',
                'setModifiedRequestClosure'
            ])
            ->getMock();
        $another_subject_module = $this->createMock(ModuleInterface::class);
        $another_subject_module
            ->method('getNameOfModule')
            ->willReturn('LastModule');
        $another_module_result
            ->method('getSubjectModule')
            ->willReturn($another_subject_module);

        $module_argument->addResult($another_module_result);

        $this->assertEquals('LastModule',
            $module_argument->getLastResult()
                            ->getSubjectModule()
                            ->getNameOfModule()
        );
    }

    public function testGetLastResultMethodReturnsNullIfNoModuleResultsWasAdded()
    {
        $module_argument = new ModuleArgument([
            'request' => $this->request,
            'response' => $this->response,
        ]);

        $this->assertNull($module_argument->getLastResult());
    }

    public function testMethodGetModuleResultByModuleWillReturnModuleResultByModuleClassNameIfExists()
    {
        $subject_module = $this->createMock(MvcModule::class);
        $subject_module->method('getNameOfModule')->willReturn(MvcModule::class);
        $module_result = $this->getMockBuilder(ModuleResultInterface::class)
            ->setMethods([
                'getResultClosure',
                'setResultClosure',
                'getSubjectModule',
                'getTheResult',
                'getModifiedResponseClosure',
                'setModifiedResponseClosure',
                'getModifiedRequestClosure',
                'setModifiedRequestClosure'
            ])
            ->getMock();
        $module_result->method('getSubjectModule')->willReturn($subject_module);

        $module_argument = new ModuleArgument([
            'request' => $this->request,
            'response' => $this->response,
            'result' => $module_result
        ]);

        $module_argument->addResult($module_result);

        $another_module_result = $this
            ->getMockBuilder(ModuleResultInterface::class)
            ->setMethods([
                'getResultClosure',
                'setResultClosure',
                'getSubjectModule',
                'getTheResult',
                'getModifiedResponseClosure',
                'setModifiedResponseClosure',
                'getModifiedRequestClosure',
                'setModifiedRequestClosure'
            ])
            ->getMock();
        $another_subject_module = $this->createMock(ModuleInterface::class);
        $another_subject_module
            ->method('getNameOfModule')
            ->willReturn('LastModule');
        $another_module_result
            ->method('getSubjectModule')
            ->willReturn($another_subject_module);

        $module_argument->addResult($another_module_result);

        $this->assertEquals('LastModule',
            $module_argument->getLastResult()
                ->getSubjectModule()
                ->getNameOfModule()
        );

        $this->assertSame($another_module_result, $module_argument->getModuleResult('LastModule'));
        $this->assertEquals(MvcModule::class, $module_argument
            ->getModuleResult(MvcModule::class)
            ->getSubjectModule()
            ->getNameOfModule());
        $this->assertNull($module_argument->getModuleResult('SomeClassThatNeverExisted'));
    }
}
